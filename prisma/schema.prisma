generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model GuestParty {
  id                Int               @id @default(autoincrement())
  partyName         String            @unique
  token             String            @unique
  guestType         String
  inviteCode        String            @unique
  dietary           String?
  fridayParty       Boolean?
  paid              Boolean?
  needsBus          Boolean?
  accommodationCost Int?
  cabinId           Int?
  rsvpLocked        Boolean?          @default(false)
  bookingReference  String?
  bookingFee        Int?
  totalCost         Int?
  cabin             Cabin?            @relation(fields: [cabinId], references: [id])
  guests            IndividualGuest[]
}

model IndividualGuest {
  id        String      @id @default(cuid())
  partyId   Int
  firstName String
  lastName  String
  rsvp      RSVPStatus? @default(Pending)
  isChild   Boolean?
  isBaby    Boolean?
  age       Int?
  note      String?
  relation  String?
  roomId    Int?
  party     GuestParty  @relation(fields: [partyId], references: [id])
  room      Room?       @relation(fields: [roomId], references: [id])
}

model Cabin {
  id            Int          @id @default(autoincrement())
  name          String
  imageFileName String?
  videoUrl      String?
  capacity      Int?
  roomCount     Int?
  hotTub        String?
  checkIn       String?
  checkOut      String?
  parties       GuestParty[]
  rooms         Room[]
}

model Room {
  id       Int               @id @default(autoincrement())
  name     String
  roomType String
  capacity Int
  enSuite  Boolean
  cabinId  Int
  guests   IndividualGuest[]
  cabin    Cabin             @relation(fields: [cabinId], references: [id])
}

model Gift {
  id          Int            @id @default(autoincrement())
  name        String
  description String
  amount      Int
  quantity    Int?
  claimed     Int            @default(0)
  section     GiftSection
  imagePath   String?
  createdAt   DateTime       @default(now())
  purchases   GiftPurchase[]
}

model GiftPurchase {
  id              String   @id
  giftId          Int
  name            String
  message         String?
  paymentIntentId String?
  createdAt       DateTime @default(now())
  gift            Gift     @relation(fields: [giftId], references: [id])
}

model Photo {
  id         String   @id @default(cuid())
  filename   String
  url        String
  uploadedBy String?
  uploadedAt DateTime @default(now())
  approved   Boolean  @default(true)
  deleted    Boolean  @default(false)
}

model FridayNightPhoto {
  id         String   @id @default(cuid())
  filename   String
  url        String
  uploadedBy String?  @default("Admin")
  uploadedAt DateTime @default(now())
  approved   Boolean  @default(true)
  deleted    Boolean  @default(false)
  order      Int?     // For custom ordering of photos
}

enum GuestType {
  OnSite
  OtherAccommodation
  AccommodationNotOffered
}

enum RSVPStatus {
  Yes
  No
  Pending
}

enum GiftSection {
  SullysGarden
  TheCruise
  GeneralGifts
}
